x-airflow-common:  # Creates a yaml extension
  &airflow-common  # Creates a yaml anchor
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY:-''}  # Used to encrypt sensitive information, like connection passwords
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'  # Enables a built-in health check endpoint on the Airflow scheduler
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'  # TODO: Explore; what to put in cfg, what in compose?
    PYTHONPATH: /opt/airflow  # Tell Python where to look for modules/packages when using import
  volumes:
    # Docker Compose volume mapping: connects local directories to directories inside the Docker container
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/pipeline:/opt/airflow/pipeline
    - ${AIRFLOW_PROJ_DIR:-.}/db:/opt/airflow/db  # Location of SQLite database; obsolete for Postgres
  user: "${AIRFLOW_UID:-50000}:0"  # UserID:GroupID
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  # Airflow's metadata database, which Airflow components use to store the state of workflows and takes
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      POSTGRES_db: ${POSTGRES_db:-airflow}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]  # Command that Docker runs inside the container to check service health
      interval: 10s  # How often Docker runs the healthcheck
      retries: 5  # How many consecutive failures are allowed?
      start_period: 5s  # Initial wait time before running health checks

  # Serves the Airflow web UI
  airflow-apiserver:
    <<: *airflow-common  # Inherit all configuration from airflow-common template
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      # Needs to inherit again, because defining a new depends_on overwrites whatever was previously inherited from
      # airflow-common
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Handles triggering scheduled workflows, and submitting tasks to the executor to run
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Parses DAG files and serializes them into the metadata database
  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # Initialize Airflow: create folders, setup permissions
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash  # Open a bash shell when the container starts
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then  # Checks if variable AIRFLOW_UID is empty
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files be owned by root."
          echo "For other operating systems you can get rid of the warning with a manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$$(id -u)
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"  # Run as root

  # Containerized CLI for running Airflow command; technically not necessary, but allows easy debugging of Airflow commands
  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - c
      - airflow
    depends_on:
      <<: *airflow-common-depends-on

volumes:
  # Create and manage a persistent volume; mounted inside the Postgres container to allow persistent database
  postgres-db-volume:
